[metadata]
author = Eric Dodds
author_email = edodds@yahooinc.com
classifiers =
    Programming Language :: Python :: 3
description = Python module maaf
long_description = file:README.md
long_description_content_type = text/markdown
name = maaf
version = 2.0.0

[options]
package_dir =
    = src

namespace_packages =

packages = find:

[options.packages.find]
where = src


install_requires =
    numpy>=1.16.4
    Pillow>=6.1.0
    tensorboardX
    torch>=1.4
    torchvision>=0.7.0
    tqdm
    tokenizers>=0.8.1.rc1
    transformers>=3.0.2
    yacs
    gitpython

# By default new packages require at minimum the current supported Python release.
python_requires = >="3.6"

[options.extras_require]
# This config section allows you to define optional dependencies.  For the general case, the defaults will
# work fine.  So these settings aren't required.  However, many of the screwdriver CI Pipeline steps
# will install the appropriate extras for that step.  This makes it possible to install packages that install
# or enhance the functionality of the CI Pipeline step.
# Such as packages that implement plugins or themes for the step in question.

# Additional packages for testing (test step)
test =

# Additonal packages needed for documentation generation (doc_build/doc_publish steps)
# If you want to use a sphinx theme from a package, list it here.
doc_build =

# Additional packages needed for mypy type checking
mypy =

# Additional packages needed for pep8/pycodestyle style checking
pep8 =

# Additional packages needed for pylint code analysis
pylint =

[options.entry_points]
# Console script entry points are used to create wrapper scripts that run a specific function, the resulting wrapper
# is installed in the bin directory.

# They are defined using the following format:
#    scriptname = modulename:function
# console_scripts =
#     multimodal=maaf.cli:main

[screwdrivercd.version]
# Package versioning plugin/method to use.
#
# Note:
#    Switching between different plugins can be difficult, since new package numbers need to have a higher
#    major number than previously published packages.  So for example, if the version in the metadata of
#    this file is 0.0.0 (default value) and the version_type below is sdv4_SD_BUILD.  The version generated
#    will be 0.0.build_number.  If the version_type is changed to sdv4_date  the version generated will be
#    year.month.build_number.  If the version_type is then changed badk to the sdv4_SD_BUILD the versions
#    generated will be again 0.0.build_number which will be a lower version than those generated by the sdv4_date
#    plugin, so installations will always treat the older packages generated by the sdv4_date plugin as newer
#    until the version in this file is updated with a major number (first part) that is higher than the 2 digit year
#    number.
#
#    Essentially this means changing to using the sdv4_date plugin to use date based versions can be done easily, but
#    switching back to the default requires more changes than simply changing the value back.

# These versioners require the CI Pipeline to have an update_version build step that runs before
# any packaging steps.

# Base the autoversion build number on the screwdriver build number
version_type = sdv4_SD_BUILD

# Base the autoversion build number on the current date and the screwdriver build number
# version_type = sdv4_date
